####################################

    The `MANIFEST.in` file in a Python project is used to specify which additional files should be included when creating a source distribution package (often a `.tar.gz` or `.zip` file) using tools like `setuptools` or `distutils`. It allows you to control which files and directories are packaged along with your Python code when you distribute your project.

    Here's what you can typically include in a `MANIFEST.in` file:

    1. **File and Directory Inclusion:**
    - You can specify individual files or directories that should be included in the distribution package. For example:
        ```
        include README.md
        include data/*.txt
        ```

    2. **File Exclusion:**
    - You can exclude specific files or directories from being included in the distribution. This is useful for excluding temporary or test files. For example:
        ```
        exclude tests/*.pyc
        ```

    3. **Recursive Inclusion:**
    - You can use wildcards to include files and directories recursively. For example, to include all `.txt` files in the `docs` directory and its subdirectories:
        ```
        recursive-include docs *.txt
        ```

    4. **Explicit Inclusion of Data Files:**
    - You can explicitly include data files using the `graft` directive. For example:
        ```
        graft data
        ```

    5. **Global Exclusion:**
    - You can use the `global-exclude` directive to specify files or patterns that should be excluded globally. For example:
        ```
        global-exclude *.pyc
        ```

    6. **Version Control Exclusion:**
    - It's common to exclude version control system files (e.g., `.git`, `.svn`, `.hg`) from the distribution package. This can be achieved using the `prune` directive:
        ```
        prune .git
        ```

    Here's an example of a simple `MANIFEST.in` file:

    ```plaintext
    include README.md
    include LICENSE
    recursive-include data *
    global-exclude *.pyc
    prune .git
    ```

    To create a distribution package, you typically run commands like `python setup.py sdist` or use tools like `twine` to upload the package to the Python Package Index (PyPI). The `MANIFEST.in` file is used by these tools to determine which files should be included in the distribution package. It allows you to fine-tune what gets packaged and what doesn't, ensuring that only necessary files are distributed with your Python project.


####################################

include .flake8
include .gitignore
include CONTRIBUTING.md
include CREDITS
include HISTORY.rst
include INSTALL.rst
include LICENSE
include MANIFEST.in
include Makefile
include README.md
include docs/DEVGUIDE.rst
include docs/DEVNOTES
include docs/Makefile
include docs/README
include docs/_static/copybutton.js
include docs/_static/css/custom.css
include docs/_static/favicon.ico
include docs/_static/sidebar.js
include docs/conf.py
include docs/index.rst
include docs/make.bat
include make.bat
include psutil/__init__.py
include psutil/_common.py
...